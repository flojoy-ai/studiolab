// source: flowchart.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.flowchart.FlowchartCancelRequest', null, global);
goog.exportSymbol('proto.flowchart.FlowchartControlRequest', null, global);
goog.exportSymbol('proto.flowchart.FlowchartReply', null, global);
goog.exportSymbol('proto.flowchart.FlowchartRequest', null, global);
goog.exportSymbol('proto.flowchart.FlowchartRequest.RequestCase', null, global);
goog.exportSymbol('proto.flowchart.FlowchartStartRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flowchart.FlowchartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.flowchart.FlowchartRequest.oneofGroups_);
};
goog.inherits(proto.flowchart.FlowchartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flowchart.FlowchartRequest.displayName = 'proto.flowchart.FlowchartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flowchart.FlowchartStartRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flowchart.FlowchartStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flowchart.FlowchartStartRequest.displayName = 'proto.flowchart.FlowchartStartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flowchart.FlowchartCancelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flowchart.FlowchartCancelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flowchart.FlowchartCancelRequest.displayName = 'proto.flowchart.FlowchartCancelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flowchart.FlowchartControlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flowchart.FlowchartControlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flowchart.FlowchartControlRequest.displayName = 'proto.flowchart.FlowchartControlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flowchart.FlowchartReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.flowchart.FlowchartReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flowchart.FlowchartReply.displayName = 'proto.flowchart.FlowchartReply';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.flowchart.FlowchartRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.flowchart.FlowchartRequest.RequestCase = {
  REQUEST_NOT_SET: 0,
  START: 1,
  CANCEL: 2,
  CONTROL: 3
};

/**
 * @return {proto.flowchart.FlowchartRequest.RequestCase}
 */
proto.flowchart.FlowchartRequest.prototype.getRequestCase = function() {
  return /** @type {proto.flowchart.FlowchartRequest.RequestCase} */(jspb.Message.computeOneofCase(this, proto.flowchart.FlowchartRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flowchart.FlowchartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flowchart.FlowchartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flowchart.FlowchartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && proto.flowchart.FlowchartStartRequest.toObject(includeInstance, f),
    cancel: (f = msg.getCancel()) && proto.flowchart.FlowchartCancelRequest.toObject(includeInstance, f),
    control: (f = msg.getControl()) && proto.flowchart.FlowchartControlRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flowchart.FlowchartRequest}
 */
proto.flowchart.FlowchartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flowchart.FlowchartRequest;
  return proto.flowchart.FlowchartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flowchart.FlowchartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flowchart.FlowchartRequest}
 */
proto.flowchart.FlowchartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.flowchart.FlowchartStartRequest;
      reader.readMessage(value,proto.flowchart.FlowchartStartRequest.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.flowchart.FlowchartCancelRequest;
      reader.readMessage(value,proto.flowchart.FlowchartCancelRequest.deserializeBinaryFromReader);
      msg.setCancel(value);
      break;
    case 3:
      var value = new proto.flowchart.FlowchartControlRequest;
      reader.readMessage(value,proto.flowchart.FlowchartControlRequest.deserializeBinaryFromReader);
      msg.setControl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flowchart.FlowchartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flowchart.FlowchartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flowchart.FlowchartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.flowchart.FlowchartStartRequest.serializeBinaryToWriter
    );
  }
  f = message.getCancel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.flowchart.FlowchartCancelRequest.serializeBinaryToWriter
    );
  }
  f = message.getControl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.flowchart.FlowchartControlRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional FlowchartStartRequest start = 1;
 * @return {?proto.flowchart.FlowchartStartRequest}
 */
proto.flowchart.FlowchartRequest.prototype.getStart = function() {
  return /** @type{?proto.flowchart.FlowchartStartRequest} */ (
    jspb.Message.getWrapperField(this, proto.flowchart.FlowchartStartRequest, 1));
};


/**
 * @param {?proto.flowchart.FlowchartStartRequest|undefined} value
 * @return {!proto.flowchart.FlowchartRequest} returns this
*/
proto.flowchart.FlowchartRequest.prototype.setStart = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.flowchart.FlowchartRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flowchart.FlowchartRequest} returns this
 */
proto.flowchart.FlowchartRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flowchart.FlowchartRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FlowchartCancelRequest cancel = 2;
 * @return {?proto.flowchart.FlowchartCancelRequest}
 */
proto.flowchart.FlowchartRequest.prototype.getCancel = function() {
  return /** @type{?proto.flowchart.FlowchartCancelRequest} */ (
    jspb.Message.getWrapperField(this, proto.flowchart.FlowchartCancelRequest, 2));
};


/**
 * @param {?proto.flowchart.FlowchartCancelRequest|undefined} value
 * @return {!proto.flowchart.FlowchartRequest} returns this
*/
proto.flowchart.FlowchartRequest.prototype.setCancel = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.flowchart.FlowchartRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flowchart.FlowchartRequest} returns this
 */
proto.flowchart.FlowchartRequest.prototype.clearCancel = function() {
  return this.setCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flowchart.FlowchartRequest.prototype.hasCancel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FlowchartControlRequest control = 3;
 * @return {?proto.flowchart.FlowchartControlRequest}
 */
proto.flowchart.FlowchartRequest.prototype.getControl = function() {
  return /** @type{?proto.flowchart.FlowchartControlRequest} */ (
    jspb.Message.getWrapperField(this, proto.flowchart.FlowchartControlRequest, 3));
};


/**
 * @param {?proto.flowchart.FlowchartControlRequest|undefined} value
 * @return {!proto.flowchart.FlowchartRequest} returns this
*/
proto.flowchart.FlowchartRequest.prototype.setControl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.flowchart.FlowchartRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flowchart.FlowchartRequest} returns this
 */
proto.flowchart.FlowchartRequest.prototype.clearControl = function() {
  return this.setControl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flowchart.FlowchartRequest.prototype.hasControl = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flowchart.FlowchartStartRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flowchart.FlowchartStartRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flowchart.FlowchartStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartStartRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    rf: (f = msg.getRf()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flowchart.FlowchartStartRequest}
 */
proto.flowchart.FlowchartStartRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flowchart.FlowchartStartRequest;
  return proto.flowchart.FlowchartStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flowchart.FlowchartStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flowchart.FlowchartStartRequest}
 */
proto.flowchart.FlowchartStartRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setRf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flowchart.FlowchartStartRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flowchart.FlowchartStartRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flowchart.FlowchartStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartStartRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRf();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any rf = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.flowchart.FlowchartStartRequest.prototype.getRf = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.flowchart.FlowchartStartRequest} returns this
*/
proto.flowchart.FlowchartStartRequest.prototype.setRf = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flowchart.FlowchartStartRequest} returns this
 */
proto.flowchart.FlowchartStartRequest.prototype.clearRf = function() {
  return this.setRf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flowchart.FlowchartStartRequest.prototype.hasRf = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flowchart.FlowchartCancelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flowchart.FlowchartCancelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flowchart.FlowchartCancelRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartCancelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flowchart.FlowchartCancelRequest}
 */
proto.flowchart.FlowchartCancelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flowchart.FlowchartCancelRequest;
  return proto.flowchart.FlowchartCancelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flowchart.FlowchartCancelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flowchart.FlowchartCancelRequest}
 */
proto.flowchart.FlowchartCancelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flowchart.FlowchartCancelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flowchart.FlowchartCancelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flowchart.FlowchartCancelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartCancelRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flowchart.FlowchartControlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.flowchart.FlowchartControlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flowchart.FlowchartControlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartControlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flowchart.FlowchartControlRequest}
 */
proto.flowchart.FlowchartControlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flowchart.FlowchartControlRequest;
  return proto.flowchart.FlowchartControlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flowchart.FlowchartControlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flowchart.FlowchartControlRequest}
 */
proto.flowchart.FlowchartControlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockId(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flowchart.FlowchartControlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flowchart.FlowchartControlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flowchart.FlowchartControlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartControlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string block_id = 1;
 * @return {string}
 */
proto.flowchart.FlowchartControlRequest.prototype.getBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowchart.FlowchartControlRequest} returns this
 */
proto.flowchart.FlowchartControlRequest.prototype.setBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any value = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.flowchart.FlowchartControlRequest.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.flowchart.FlowchartControlRequest} returns this
*/
proto.flowchart.FlowchartControlRequest.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flowchart.FlowchartControlRequest} returns this
 */
proto.flowchart.FlowchartControlRequest.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flowchart.FlowchartControlRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flowchart.FlowchartReply.prototype.toObject = function(opt_includeInstance) {
  return proto.flowchart.FlowchartReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flowchart.FlowchartReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flowchart.FlowchartReply}
 */
proto.flowchart.FlowchartReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flowchart.FlowchartReply;
  return proto.flowchart.FlowchartReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flowchart.FlowchartReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flowchart.FlowchartReply}
 */
proto.flowchart.FlowchartReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockId(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flowchart.FlowchartReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flowchart.FlowchartReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flowchart.FlowchartReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flowchart.FlowchartReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string block_id = 1;
 * @return {string}
 */
proto.flowchart.FlowchartReply.prototype.getBlockId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.flowchart.FlowchartReply} returns this
 */
proto.flowchart.FlowchartReply.prototype.setBlockId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any value = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.flowchart.FlowchartReply.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.flowchart.FlowchartReply} returns this
*/
proto.flowchart.FlowchartReply.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flowchart.FlowchartReply} returns this
 */
proto.flowchart.FlowchartReply.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flowchart.FlowchartReply.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.flowchart);
